# This patch file was generated by NetBeans IDE
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: legal.admin.inc
--- legal.admin.inc Base (BASE)
+++ legal.admin.inc Locally Modified (Based On LOCAL)
@@ -129,6 +129,16 @@
     '#title' => t('Changes'),
   );
 
+  $form['major'] = array(
+    '#access' => user_access('set major Terms and Conditions'),
+    '#type' => 'radios',
+    '#title' => t('Major or minor version'),
+    '#default_value' => variable_get('legal_major_defaults', 0),
+    '#options' => array(t('Minor'),t('Major')),
+    '#description' => t('If flagged as Major, all users will have to accept. If marked as Minor, users who have accepted the last Major version will not have to accept this Minor version'),
+    '#required' => TRUE,
+  );
+
   $form['#after_build'] = array('legal_preview'); 
 
   $form['preview'] = array(
@@ -209,7 +219,7 @@
   // If new conditions are different from current permisions, enter in database.
   if (legal_conditions_updated($values)) {
     $version = legal_version($values['version_handling'], $values['language']);
-    db_query("INSERT INTO {legal_conditions} (tc_id, version, revision, language, conditions, date, extras, changes) VALUES (NULL, %d, %d, '%s', '%s', %d, '%s', '%s')", $version['version'], $version['revision'], $values['language'], $values['conditions'], time(), serialize($values['extras']), $values['changes']);
+    db_query("INSERT INTO {legal_conditions} (tc_id, version, revision, language, conditions, date, extras, changes, major) VALUES (NULL, %d, %d, '%s', '%s', %d, '%s', '%s', %d)", $version['version'], $version['revision'], $values['language'], $values['conditions'], time(), serialize($values['extras']), $values['changes'], $values['major']);
     drupal_set_message (t('Terms & Conditions have been saved.'));
   }
 
@@ -363,4 +373,24 @@
 	return $row;
 }
 
+function legal_major_defaults () {
 
+  $form = array();
+  
+  $form['legal_major_defaults'] = array(
+    '#type' => 'radios',
+    '#title' => t('Major or minor release'),
+    '#default_value' => variable_get('legal_major_defaults', 0),
+    '#options' => array(t('Minor'),t('Major')),
+    '#description' => t('This is the default that will be set for changes to the Terms and Conditions'),
+    '#required' => TRUE,
+  );
+  
+  $form['save'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  return system_settings_form($form);
+}
+
Index: legal.install
--- legal.install Base (BASE)
+++ legal.install Locally Modified (Based On LOCAL)
@@ -146,6 +146,17 @@
 }
 
 /**
+ * Add major field and set to 0 (minor)
+ */
+function legal_update_6004() {
+  $ret = array();
+  db_add_field($ret, 'legal_conditions', 'major', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
+  $ret[] = update_sql('UPDATE {legal_conditions} SET major = 0');
+
+  return $ret;
+}
+
+/**
  * Implementation of hook_uninstall().
  */
 function legal_uninstall() {
Index: legal.module
--- legal.module Base (BASE)
+++ legal.module Locally Modified (Based On LOCAL)
@@ -23,7 +23,7 @@
  * Implementation of hook_perm().
  */
 function legal_perm() {
-  return array('administer Terms and Conditions', 'view Terms and Conditions');
+  return array('administer Terms and Conditions', 'view Terms and Conditions', 'set major Terms and Conditions', 'change major default');
 }
 
 /**
@@ -67,6 +67,16 @@
 	  'file' => 'legal.admin.inc',
 	); 
 	
+  $items['admin/settings/legal/major'] = array(
+    'title' => 'Major defaults',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('legal_major_defaults'),
+    'access arguments' => array('change major default'),
+    'description' => 'Set the default for major or minor versions',
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'legal.admin.inc',
+  );
+	
   $items['legal'] = array(
     'title' => 'Terms and Conditions',
     'page callback' => 'legal_page',
@@ -254,15 +264,20 @@
 				if (empty($conditions['conditions'])) return;	
 			}
 			else { // get version / revision of last accepted language
-
-				$conditions = legal_get_conditions($legal_account['language']);
+        // Only check for major versions
+				$conditions = legal_get_conditions($legal_account['language'], TRUE);
 				// no conditions set yet 
 	      if (empty($conditions['conditions'])) return;
 	
         // Check latest version of T&C has been accepted.
         $accepted = legal_version_check($user->uid, $conditions['version'], $conditions['revision'], $legal_account);
 
-				if ($accepted) {
+        // Get latest version accepted
+        $latest = legal_get_accept($user->uid);
+        $latest_id = $latest['version'];
+
+        if ($accepted || $latest_id  > $conditions['tc_id']) {
+          // User has accepted latest version or a newer version (minor) has been accepted
 					return;
 				}
 			}
@@ -561,16 +576,22 @@
   db_query("INSERT INTO {legal_accepted} (version, revision, language, uid, accepted) VALUES (%d, %d, '%s', %d, %d)", $version, $revision, $language, $uid, time());
 }
 
-function legal_get_conditions($language = NULL) {
+function legal_get_conditions($language = NULL, $major = FALSE) {
 	$keys = array('tc_id', 'version', 'revision', 'language', 'conditions', 'date', 'extras', 'changes');
  
 	if (!empty($language)) {
     $args[] = $language;
-		$result = db_fetch_array(db_query_range("SELECT * FROM {legal_conditions} WHERE language = '%s' ORDER BY version DESC, revision DESC", $args, 0, 1));	
+    if ($major) {
+      $where = 'AND major = 1';
 	}
+		$result = db_fetch_array(db_query_range("SELECT * FROM {legal_conditions} WHERE language = '%s' $where ORDER BY version DESC, revision DESC", $args, 0, 1));
+	}
 	else {
-		$result = db_fetch_array(db_query_range("SELECT * FROM {legal_conditions} ORDER BY tc_id DESC", 0, 1));	
+    if ($major) {
+      $where = 'WHERE major = 1';
 	}
+		$result = db_fetch_array(db_query_range("SELECT * FROM {legal_conditions} $where ORDER BY tc_id DESC", 0, 1));
+	}
 
 	foreach ($keys as $key) {
 		$conditions[$key] = isset($result[$key]) ? $result[$key] : '';
